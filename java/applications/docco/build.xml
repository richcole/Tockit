<?xml version="1.0" encoding="UTF-8"?>
<project name="Docco" default="run" basedir=".">
	<!-- change this to a fixed value for releases -->
	<target name="setBuildName">
		<tstamp>
    		<format property="timestamp" pattern="yyyyMMdd-HHmm"/>
		</tstamp>
		<property name="dist.name" value="Docco-CVSbuild-${timestamp}"/>
  	</target>
  	
  	<!-- IMPORTANT! We assume the source and libs of ToscanaJ in these spots. -->
  	<!-- BIG TODO: move all resued code into Tockit -->
  	<property name="toscanaj.src.dir" value="../source"/>
  	<property name="toscanaj.libs.dir" value="../libs"/>

	<property name="app.name" value="Docco"/>
	<property name="build.dev.dir" value="build/dev"/>
	<property name="build.release.dir" value="build/release"/>
	<property name="dist.dir" value="dist"/>
	<property name="src.dir" value="source"/>
	<property name="libs.dir" value="libs"/>
    <property name="docco.class" value="org.tockit.docco.Docco"/>
	<property name="plugins.dir" value="plugins"/>

	<path id="plugins.libs.path">
        <fileset dir="${plugins.dir}">
            <include name="**/libs/*.jar"/>
        </fileset>
        <fileset dir="${plugins.dir}">
            <include name="**/libs/*.zip"/>
        </fileset>	
	</path>

    <path id="project.dev.class.path">
        <pathelement path="${classpath}"/>
        <pathelement path="${build.dev.dir}"/>
        <pathelement path="${plugins.libs.path}"/>
        <fileset dir="${libs.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${libs.dir}">
            <include name="**/*.zip"/>
        </fileset>
        <fileset dir="${toscanaj.libs.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${toscanaj.libs.dir}">
            <include name="**/*.zip"/>
        </fileset>
        <fileset dir="${toscanaj.libs.dir}/testing">
            <include name="**/*.zip"/>
        </fileset>
    </path>
    <path id="project.release.class.path">
        <pathelement path="${classpath}"/>
        <pathelement path="${build.release.dir}"/>
        <pathelement path="${plugins.libs.path}"/>
        <fileset dir="${libs.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${libs.dir}">
            <include name="**/*.zip"/>
        </fileset>
        <fileset dir="${toscanaj.libs.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${toscanaj.libs.dir}">
            <include name="**/*.zip"/>
        </fileset>
        <fileset dir="${toscanaj.libs.dir}/testing">
            <include name="**/*.zip"/>
        </fileset>
    </path>
	<target name="prepare" depends="setBuildName">
		<mkdir dir="${build.dev.dir}"/>
		<mkdir dir="${build.release.dir}"/>
	</target>
	<target name="clean">
		<delete dir="${build.release.dir}"/>
		<delete dir="${build.dev.dir}"/>
		<delete dir="${dist.dir}"/>
	</target>
	<target name="compile" depends="prepare">
		<javac srcdir="${toscanaj.src.dir}" destdir="${build.dev.dir}" debug="on" optimize="off" deprecation="on">
			<classpath refid="project.dev.class.path"/>
		</javac>
		<javac srcdir="${src.dir}" destdir="${build.dev.dir}" debug="on" optimize="off" deprecation="on">
			<classpath refid="project.dev.class.path"/>
		</javac>
	</target>
	<target name="compileRelease" depends="prepare">
		<javac srcdir="${toscanaj.src.dir}" destdir="${build.release.dir}" debug="off" optimize="on" deprecation="off">
			<classpath refid="project.release.class.path"/>
		</javac>
		<javac srcdir="${src.dir}" destdir="${build.release.dir}" debug="off" optimize="on" deprecation="off">
			<classpath refid="project.release.class.path"/>
		</javac>
	</target>
    <target name="rebuild" depends="clean,compile"/>
    <target name="prepareDist">
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${dist.dir}/${dist.name}"/>
	</target>
	<target name="makeDebugJar" depends="compile,prepareDist">
		<jar jarfile="${dist.dir}/${dist.name}/${app.name}.jar" basedir="${build.dev.dir}" manifest="manifest.mf"/>
	</target>
	<target name="makeReleaseJar" depends="compileRelease,prepareDist">
		<jar jarfile="${dist.dir}/${dist.name}/${app.name}.jar" basedir="${build.release.dir}" manifest="manifest.mf"/>
	</target>
	<target name="copyFiles">
		<copy todir="${dist.dir}/${dist.name}/libs" includeEmptyDirs="no">
			<fileset dir="${libs.dir}">
		        <include name="*"/>
            </fileset>
		</copy>
		<fixcrlf srcDir="${dist.dir}/${dist.name}/libs" eol="crlf" includes="LICENSE.*"/>
		<copy todir="${dist.dir}/${dist.name}">
			<fileset dir=".">
				<include name="*.txt"/>
				<include name="*.bat"/>
				<include name="*.sh"/>
				<include name="docco.prop"/>
			</fileset>
		</copy>
		<fixcrlf srcDir="${dist.dir}/${dist.name}" eol="crlf" includes="*.txt, *.bat, docco.prop"/>
		<fixcrlf srcDir="${dist.dir}/${dist.name}" eol="lf" includes="*.sh"/>
		<copy todir="${dist.dir}/${dist.name}/doc" includeEmptyDirs="no">
			<fileset dir="${basedir}/doc">
		        <include name="**"/>
            </fileset>
		</copy>
		<copy todir="${dist.dir}/${dist.name}/plugins" includeEmptyDirs="no">
			<fileset dir="${plugins.dir}">
		        <include name="**"/>
            </fileset>
		</copy>
    </target>
	<target name="dist" depends="makeReleaseJar,copyFiles,zipFile">
	</target>
	<target name="zipFile">
		<zip destfile="${dist.dir}/${dist.name}.zip">
			<fileset dir="${dist.dir}">
				<include name="${dist.name}/**"/>
			</fileset>
		</zip>
	</target>
	<target name="run" depends="compileRelease">
		<java classname="${docco.class}" fork="true">
			<classpath refid="project.release.class.path"/>
		</java>
	</target>
	<!--
	create plugin jar.
	For now, we will just hardcode plugin directories.
	Probably should have a look at using command line arguments, ie
	<arg path="org/tockit/docco/indexer/documenthandler/pdfbox"/>
	or use properties.
	Assumptions:
	- all plugins should be somewhere in a package structure in 
		subpackage 'plugins'. Multiple occurences of this subdir
		should be allowed, i.e. there could be plugins subpackage
		under documenthandler package and under filefilter package.
	- each plugin dir contains a folder called 'libs' with all 
		required jars.
	- property "plugin.dir.name" refers to a subpackage name 
		where this plugin is located in relation to property
		"plugin.pattern.dir"
	- property "plugin.name" is used as a name of created jar file.
	-->
	<!-- 
	TODO:
	clean up this - need a better way to define plugins locations
	and names dynamically. 
	-->
	<property name="plugin.pattern.dir" value="org/tockit/docco/**/plugins/"/>    
	<property name="plugin.dir.name" value="multivalent"/>
	<property name="plugin.name" value="MultivalentDocumentHandlers"/>
	<target name="makePluginJar" depends="compileRelease">
		<mkdir dir="${plugins.dir}/${plugin.dir.name}"/>
		<jar jarfile="${plugins.dir}/${plugin.dir.name}/${plugin.name}.jar" 
					basedir="${build.release.dir}" 
					includes="${plugin.pattern.dir}/${plugin.dir.name}/*.class"/>
	</target>
	
</project>
